AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  environment:
    Type: String
    Description: Environemnt for the Stack
    Default: development
  functionName:
    Type: String
    Description: Name of the lambda function
    Default: item-api

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: lambda:InvokeFunctionUrl
                Resource: !Sub "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:${functionName}-${environment}"

  ItemApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: item-api-development
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from Lambda!'),
              };
              return response;
          };
      Runtime: nodejs22.x
      Timeout: 60

  ItemApiUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref ItemApiFunction
      AuthType: NONE

Outputs:
  ItemApiFunction:
    Description: 'ItemApiFunction Arn'
    Value: !GetAtt ItemApiFunction.Arn
  ItemApiUrl:
    Description: 'ItemApiUrl'
    Value: !GetAtt ItemApiUrl.FunctionUrl
