AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Region:
    Type: String
    Default: us-east-1
  Environment:
    Type: String
    Description: Environment for the Stack
    Default: development
    Environment:
      Type: String
      AllowedValues:
        - development
        - staging
        - production
  FunctionName:
    Type: String
    Description: Name of the lambda function
    Default: item-api

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: log-write
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  Fn::Sub: "arn:aws:logs:${Region}:${AWS::AccountId}:*"
        - PolicyName: dynamodb-read-write
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Batch*
                Resource:
                  Fn::Sub: "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${FunctionName}-${Environment}-*"
                Effect: Allow

  ItemApiLambdaFunctionUrlPublicPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ItemApiFunction
      Principal: '*'
      Action: 'lambda:InvokeFunctionUrl'
      FunctionUrlAuthType: NONE

  ItemApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 
        Fn::Sub: "${FunctionName}-${Environment}"
      Handler: index.handler
      Role:
        Fn::GetAtt: LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('item-api ready for deployment'),
              };
              return response;
          };
      Runtime: nodejs22.x
      Timeout: 60
      MemorySize: 128
      Architectures:
        - arm64
      Environment:
        Variables:
          ENVIRONMENT:
            Fn::Sub: "${Environment}"
          API_KEY_AUTH:
            Fn::Sub: "change-secret"

  ItemApiUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn:
        Ref: ItemApiFunction
      AuthType: NONE

  DynamoDBItems:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: "${FunctionName}-${Environment}-item"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "name"
          AttributeType: "S"
        - AttributeName: "user_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: 
            Fn::Sub: "${FunctionName}-${Environment}-item-by-name"
          KeySchema:
            - AttributeName: "name"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          # ProvisionedThroughput:
          #   ReadCapacityUnits: 1
          #   WriteCapacityUnits: 1
        - 
          IndexName:
            Fn::Sub: "${FunctionName}-${Environment}-item-by-user-id"
          KeySchema:
            - AttributeName: "user_id"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          # ProvisionedThroughput:
          #   ReadCapacityUnits: 1
          #   WriteCapacityUnits: 1
      # ProvisionedThroughput:
      #   ReadCapacityUnits: 1
      #   WriteCapacityUnits: 1
      # BillingMode: "PAY_PER_REQUEST"
      BillingMode: "PAY_PER_REQUEST"

Outputs:
  ItemApiFunction:
    Description: 'ItemApiFunction Arn'
    Value:
      Fn::GetAtt: ItemApiFunction.Arn
  ItemApiUrl:
    Description: 'ItemApiUrl'
    Value:
      Fn::GetAtt: ItemApiUrl.FunctionUrl
